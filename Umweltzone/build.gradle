apply plugin: 'com.android.application'
apply plugin: 'org.standardout.versioneye'

versioneye {
    exclude 'androidJacocoAgent', 'androidJacocoAnt'
}

repositories {
    mavenCentral()
}

def versionMajor = 2
def versionMinor = 0
def versionPatch = 1
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

def gitSha() {
    def res = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

    def diff = 'git diff'.execute([], project.rootDir).text.trim()
    if (diff != null && diff.length() > 0) {
        res += "-dirty"
    }

    return res
}

def buildTime() {
    return new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))
}

Properties props = new Properties()
File gradlePropertiesFile = file("gradle.properties")
if (!gradlePropertiesFile.exists()) {
    throw new IllegalStateException(
            "Please create the file 'gradle.properties' before" +
                    "importing the project. Do not forget to add custom values!"
    )
}
props.load(new FileInputStream(gradlePropertiesFile))

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            // Verbose Lint output
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

android {
    compileSdkVersion 20
    buildToolsVersion "21.1.1"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 20
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        buildConfigField "String", "BUILD_VERSION", "\"${versionName}\""
        buildConfigField "int", "BUILD_VERSION_CODE", "${versionCode}"
        buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
        buildConfigField "String", "GIT_SHA", "\"${gitSha()}\""

        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def file = output.outputFile
                def fileName = file.name.replace(".apk", "-" + versionName + ".apk")
                output.outputFile = new File(file.parentFile, fileName)
            }
        }
    }

    signingConfigs {
        release {
            storeFile file(props['signing.release.keystoreFilePath'])
            storePassword props['signing.release.keystorePassword']
            keyAlias props['signing.release.keyAlias']
            keyPassword props['signing.release.keyPassword']
        }
    }

    aaptOptions {
        useNewCruncher true
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-DEBUG"
            zipAlignEnabled true
        }
        release {
            minifyEnabled true
            proguardFile 'proguard.cfg'
            shrinkResources true
            signingConfig signingConfigs.release
        }
    }

    packagingOptions {
        pickFirst 'META-INF/LICENSE'
        pickFirst 'META-INF/LICENSE.txt'
        pickFirst 'META-INF/NOTICE'
        pickFirst 'META-INF/NOTICE.txt'
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:20.0.0'
    compile 'com.android.support:support-v4:20.0.0'
    compile 'com.google.android.gms:play-services:3.2.65'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.5.0'
    compile 'de.cketti.library.changelog:ckchangelog:1.2.1'
    compile 'info.metadude.android:typed-preferences:2.0.0'
    compile fileTree(dir: 'libs', include: '*.jar')
}
