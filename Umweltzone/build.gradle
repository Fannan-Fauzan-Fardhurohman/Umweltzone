import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.github.ben-manes.versions'

versioneye {
    exclude 'androidJacocoAgent', 'androidJacocoAnt'
}

repositories {
    mavenCentral()
}

def versionMajor = 2
def versionMinor = 11
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

def gitSha() {
    def res = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

    def diff = 'git diff'.execute([], project.rootDir).text.trim()
    if (diff != null && diff.length() > 0) {
        res += "-dirty"
    }

    return res
}

def buildTime() {
    return new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            // Verbose Lint output
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

android {
    compileSdkVersion 22
    buildToolsVersion "23.0.3"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 22
        versionCode versionMajor * 100000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        buildConfigField "String", "BUILD_VERSION", "\"${versionName}\""
        buildConfigField "int", "BUILD_VERSION_CODE", "${versionCode}"
        buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
        buildConfigField "String", "GIT_SHA", "\"${gitSha()}\""
        archivesBaseName = "Umweltzone-$versionName"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    sourceSets {
        String sharedTestDir = "src/sharedTest/java"
        androidTest {
            java.srcDirs += sharedTestDir
        }
        test {
            java.srcDirs += sharedTestDir
        }
    }

    signingConfigs {
        release
    }

    aaptOptions {
        useNewCruncher true
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-DEBUG"
            zipAlignEnabled true
        }
        release {
            minifyEnabled true
            proguardFile 'proguard.cfg'
            shrinkResources true
            signingConfig signingConfigs.release
        }
    }

    packagingOptions {
        pickFirst 'META-INF/LICENSE'
        pickFirst 'META-INF/LICENSE.txt'
        pickFirst 'META-INF/NOTICE'
        pickFirst 'META-INF/NOTICE.txt'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

tasks.withType(Test) {
    testLogging {
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_ERROR,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showCauses true
        showExceptions true
        showStackTraces true
    }
}

configurations {
    // http://qathread.blogspot.de/2015/02/discovering-espresso-for-android.html
    androidTestCompile.exclude group: "com.android.support", module: "support-annotations"
    testCompile.exclude group: "com.android.support", module: "support-annotations"
}

ext {
    parcelerVersion = "1.1.6"
}

dependencies {
    compile "com.android.support:design:22.2.1"
    compile "com.google.android.gms:play-services:3.2.65"
    compile "com.fasterxml.jackson.core:jackson-databind:2.8.4"
    compile "de.cketti.library.changelog:ckchangelog:1.2.2"
    compile "info.metadude.android:typed-preferences:2.1.0"
    compile "org.parceler:parceler-api:${parcelerVersion}"
    apt "org.parceler:parceler:${parcelerVersion}"
    compile files("libs/libGoogleAnalyticsServices.jar")
    compile files("libs/TraceDroid-1.1.jar")

    // Integration tests
    androidTestCompile "com.squareup.assertj:assertj-android:1.1.1"
    androidTestCompile "com.android.support.test.espresso:espresso-core:2.2.2"

    // Unit tests
    testCompile "junit:junit:4.12"
    testCompile "com.squareup.assertj:assertj-android:1.1.1"
}

Properties props = new Properties()
File gradlePropertiesFile = file("gradle.properties")
if (gradlePropertiesFile.exists()) {
    props.load(new FileInputStream(gradlePropertiesFile))
}

if (project.hasProperty('signing.release.keystoreFilePath')) {
    android.signingConfigs.release.storeFile = file(props['signing.release.keystoreFilePath'])
}
if (project.hasProperty('signing.release.keystorePassword')) {
    android.signingConfigs.release.storePassword = props['signing.release.keystorePassword']
}
if (project.hasProperty('signing.release.keyAlias')) {
    android.signingConfigs.release.keyAlias = props['signing.release.keyAlias']
}
if (project.hasProperty('signing.release.keyPassword')) {
    android.signingConfigs.release.keyPassword = props['signing.release.keyPassword']
}
